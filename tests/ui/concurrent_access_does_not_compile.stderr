error[E0277]: `Cell<()>` cannot be shared between threads safely
  --> tests/ui/concurrent_access_does_not_compile.rs:12:17
   |
12 |           s.spawn(|| {
   |  ___________-----_^
   | |           |
   | |           required by a bound introduced by this call
13 | |             test.list().push(&5).unwrap();
14 | |         });
   | |_________^ `Cell<()>` cannot be shared between threads safely
   |
   = help: within `Test`, the trait `Sync` is not implemented for `Cell<()>`
   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock`
note: required because it appears within the type `PhantomData<Cell<()>>`
  --> $RUST/core/src/marker.rs
   |
   | pub struct PhantomData<T: ?Sized>;
   |            ^^^^^^^^^^^
note: required because it appears within the type `Test`
  --> tests/ui/concurrent_access_does_not_compile.rs:4:8
   |
4  | struct Test {
   |        ^^^^
   = note: required for `&Test` to implement `Send`
note: required because it's used within this closure
  --> tests/ui/concurrent_access_does_not_compile.rs:12:17
   |
12 |         s.spawn(|| {
   |                 ^^
note: required by a bound in `Scope::<'scope, 'env>::spawn`
  --> $RUST/std/src/thread/scoped.rs
   |
   |     pub fn spawn<F, T>(&'scope self, f: F) -> ScopedJoinHandle<'scope, T>
   |            ----- required by a bound in this associated function
   |     where
   |         F: FnOnce() -> T + Send + 'scope,
   |                            ^^^^ required by this bound in `Scope::<'scope, 'env>::spawn`
