use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, Serialize, Deserialize)]
struct Song;

#[derive(Debug, Clone, Serialize, Deserialize)]
struct Playing;

struct Db {
    queue: dbstruct::Vec<Song>,
    // playing: dbstruct::DefaultValue<Playing, Option<Playing>>,
    length: dbstruct::DefaultValue<u8, >

}

impl Db {
    // normally generated by the macro
    pub fn new() -> Self {
        let db = sled::Config::default().temporary(true).open().unwrap();
        let tree = db.open_tree("test").unwrap();

        Self {
            queue: dbstruct::Vec::new(tree.clone(), 0),
            // playing: dbstruct::DefaultValue::new(tree, 1, || { opt = None; opt }),
            length: dbstruct::DefaultValue::new(tree.clone(), 1, 0u8),
        }
    }
}

fn main() {
    let db = Db::new();
    db.queue.pop().unwrap();
}
